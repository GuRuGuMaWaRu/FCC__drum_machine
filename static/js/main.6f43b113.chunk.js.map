{"version":3,"sources":["context/sound/soundContext.js","components/displays/CurrentSoundDisplay.js","components/sounds/DrumPad.js","components/sounds/DrumPadsPanel.js","components/panes/SoundPlayPane.js","components/displays/CurrentTrackItem.js","components/displays/CurrentTrackDisplay.js","components/sounds/SoundStoreItem.js","components/sounds/SoundStore.js","components/panes/SoundStorePane.js","context/sound/soundReducer.js","context/types.js","context/sound/SoundState.js","App.js","index.js"],"names":["soundContext","createContext","CurrentSoundDisplay","currentSound","useContext","SoundContext","id","name","DrumPad","drumPad","handlePlay","useState","active","setActive","drumSound","useRef","useEffect","document","addEventListener","handleKeyPress","removeEventListener","e","key","toUpperCase","setTimeout","audio","current","className","onClick","ref","src","DrumPadsPanel","currentTrack","addSound","clearDisplays","drumData","currentTime","play","length","map","SoundPlayPane","CurrentTrackItem","isPlayed","CurrentTrackDisplay","limitReached","sound","SoundStoreItem","savedTrack","track","handleSelectTrack","handleDeleteTrack","SoundStore","savedTracks","deleteTrack","selectTrack","SoundStorePane","playSound","removeSound","saveTrack","clearTrack","playInterval","clearInterval","iteration","setInterval","state","action","type","payload","slice","uuidv1","filter","SoundState","props","useReducer","soundReducer","dispatch","Provider","value","children","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6f43b113.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst soundContext = createContext();\r\n\r\nexport default soundContext;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport SoundContext from \"../../context/sound/soundContext\";\r\nimport \"./CurrentSoundDisplay.css\";\r\n\r\nconst CurrentSoundDisplay = () => {\r\n  const soundContext = useContext(SoundContext);\r\n  const { currentSound } = soundContext;\r\n\r\n  return <div id=\"display\">{(currentSound && currentSound.name) || \"---\"}</div>;\r\n};\r\n\r\nexport default CurrentSoundDisplay;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./DrumPad.css\";\r\n\r\nconst DrumPad = ({ drumPad, handlePlay }) => {\r\n  const [active, setActive] = useState(false);\r\n  const drumSound = useRef();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keypress\", handleKeyPress);\r\n    return () => {\r\n      document.removeEventListener(\"keypress\", handleKeyPress);\r\n    };\r\n  });\r\n\r\n  const handleClick = () => {\r\n    handlePlay({ audio: drumSound.current, name: drumPad.name });\r\n  };\r\n\r\n  const handleKeyPress = e => {\r\n    if (e.key.toUpperCase() === drumPad.name.toUpperCase()) {\r\n      setActive(true);\r\n      setTimeout(() => setActive(false), 200);\r\n      handlePlay({ audio: drumSound.current, name: drumPad.name });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={active ? \"drum-pad drum-pad-active\" : \"drum-pad\"}\r\n      id={drumPad.name}\r\n      onClick={handleClick}\r\n    >\r\n      {drumPad.name}\r\n      <audio\r\n        ref={drumSound}\r\n        className=\"clip\"\r\n        id={drumPad.name}\r\n        src={drumPad.src}\r\n      ></audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nDrumPad.propTypes = {\r\n  drumPad: PropTypes.object.isRequired,\r\n  handlePlay: PropTypes.func.isRequired\r\n};\r\n\r\nexport default DrumPad;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport DrumPad from \"./DrumPad\";\r\nimport SoundContext from \"../../context/sound/soundContext\";\r\nimport \"./DrumPadsPanel.css\";\r\n\r\nconst DrumPadsPanel = () => {\r\n  const soundContext = useContext(SoundContext);\r\n  const { currentTrack, addSound, clearDisplays } = soundContext;\r\n\r\n  const drumPads = [\r\n    {\r\n      name: \"Q\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\"\r\n    },\r\n    {\r\n      name: \"W\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\"\r\n    },\r\n    {\r\n      name: \"E\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\"\r\n    },\r\n    {\r\n      name: \"A\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\"\r\n    },\r\n    {\r\n      name: \"S\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\"\r\n    },\r\n    {\r\n      name: \"D\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\"\r\n    },\r\n    {\r\n      name: \"Z\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"\r\n    },\r\n    {\r\n      name: \"X\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"\r\n    },\r\n    {\r\n      name: \"C\",\r\n      src: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"\r\n    }\r\n  ];\r\n\r\n  const handlePlay = drumData => {\r\n    const { audio, name } = drumData;\r\n\r\n    audio.currentTime = 0;\r\n    audio.play();\r\n\r\n    if (currentTrack.length > 9) {\r\n      clearDisplays();\r\n    } else {\r\n      addSound({\r\n        name: name,\r\n        audio: audio\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"drum-pads-panel\">\r\n      {drumPads.map(drumPad => (\r\n        <DrumPad key={drumPad.name} drumPad={drumPad} handlePlay={handlePlay} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DrumPadsPanel;\r\n","import React from \"react\";\r\n\r\nimport CurrentSoundDisplay from \"../displays/CurrentSoundDisplay\";\r\nimport DrumPadsPanel from \"../sounds/DrumPadsPanel\";\r\nimport \"./SoundPlayPane.css\";\r\n\r\nconst SoundPlayPane = () => {\r\n  return (\r\n    <div id=\"sound-play-pane\">\r\n      <CurrentSoundDisplay />\r\n      <DrumPadsPanel />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SoundPlayPane;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./CurrentTrackItem.css\";\r\n\r\nconst CurrentTrackItem = ({ name, isPlayed }) => {\r\n  return (\r\n    <div className={`played-sound ${isPlayed ? \"played-sound-played\" : \"\"}`}>\r\n      {name}\r\n    </div>\r\n  );\r\n};\r\n\r\nCurrentTrackItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  isPlayed: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default CurrentTrackItem;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport CurrentTrackItem from \"./CurrentTrackItem\";\r\nimport SoundContext from \"../../context/sound/soundContext\";\r\nimport \"./CurrentTrackDisplay.css\";\r\n\r\nconst CurrentTrackDisplay = () => {\r\n  const soundContext = useContext(SoundContext);\r\n  const { currentSound, currentTrack } = soundContext;\r\n\r\n  const limitReached = currentTrack.length > 9;\r\n\r\n  return (\r\n    <div\r\n      className={`played-sounds-display ${limitReached ? \"limit-reached\" : \"\"}`}\r\n    >\r\n      {currentTrack.length === 0\r\n        ? \"---\"\r\n        : currentTrack.map(sound => (\r\n            <CurrentTrackItem\r\n              key={sound.id}\r\n              name={sound.name}\r\n              isPlayed={\r\n                currentSound && currentSound.id === sound.id ? true : false\r\n              }\r\n            />\r\n          ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentTrackDisplay;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./SoundStoreItem.css\";\r\n\r\nconst SoundStoreItem = ({\r\n  savedTrack: { id, track },\r\n  handleSelectTrack,\r\n  handleDeleteTrack\r\n}) => {\r\n  return (\r\n    <div className=\"sound-store-item\">\r\n      <div\r\n        className=\"sound-store-item-track\"\r\n        onClick={() => handleSelectTrack(id)}\r\n      >\r\n        {track.map(sound => (\r\n          <span key={sound.id} className=\"sound-store-item-sound\">\r\n            {sound.name}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <button\r\n        className=\"delete-store-item-button\"\r\n        onClick={() => handleDeleteTrack(id)}\r\n      >\r\n        <i className=\"fas fa-times\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nSoundStoreItem.propTypes = {\r\n  savedTrack: PropTypes.object.isRequired,\r\n  handleSelectTrack: PropTypes.func.isRequired,\r\n  handleDeleteTrack: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SoundStoreItem;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport SoundStoreItem from \"./SoundStoreItem\";\r\nimport SoundContext from \"../../context/sound/soundContext\";\r\nimport \"./SoundStore.css\";\r\n\r\nconst SoundStore = () => {\r\n  const soundContext = useContext(SoundContext);\r\n  const { savedTracks, deleteTrack, selectTrack } = soundContext;\r\n\r\n  const handleSelectTrack = id => {\r\n    selectTrack(id);\r\n  };\r\n\r\n  const handleDeleteTrack = id => {\r\n    deleteTrack(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"sound-store\">\r\n      {savedTracks.length > 0 &&\r\n        savedTracks.map(savedTrack => (\r\n          <SoundStoreItem\r\n            key={savedTrack.id}\r\n            savedTrack={savedTrack}\r\n            handleSelectTrack={handleSelectTrack}\r\n            handleDeleteTrack={handleDeleteTrack}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SoundStore;\r\n","import React, { useContext, useRef } from \"react\";\r\n\r\nimport CurrentTrackDisplay from \"../displays/CurrentTrackDisplay\";\r\nimport SoundStore from \"../sounds/SoundStore\";\r\nimport SoundContext from \"../../context/sound/soundContext\";\r\nimport \"./SoundStorePane.css\";\r\n\r\nconst SoundStorePane = () => {\r\n  const soundContext = useContext(SoundContext);\r\n  const {\r\n    currentTrack,\r\n    savedTracks,\r\n    playSound,\r\n    removeSound,\r\n    saveTrack,\r\n    clearTrack\r\n  } = soundContext;\r\n\r\n  const playInterval = useRef();\r\n\r\n  const handlePlay = () => {\r\n    let iteration = 0;\r\n\r\n    playInterval.current = setInterval(() => {\r\n      if (iteration >= currentTrack.length) {\r\n        clearInterval(playInterval.current);\r\n        playInterval.current = null;\r\n        playSound(null);\r\n        return;\r\n      }\r\n\r\n      playSound({\r\n        id: currentTrack[iteration].id,\r\n        name: currentTrack[iteration].name\r\n      });\r\n\r\n      currentTrack[iteration].audio.currentTime = 0;\r\n      currentTrack[iteration].audio.play();\r\n\r\n      iteration += 1;\r\n    }, 500);\r\n  };\r\n\r\n  const handleStop = () => {\r\n    clearInterval(playInterval.current);\r\n    playInterval.current = null;\r\n    playSound(null);\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    removeSound();\r\n  };\r\n\r\n  const handleClear = () => {\r\n    clearTrack();\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (savedTracks.length < 5 && currentTrack.length > 0) {\r\n      saveTrack();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sound-store-pane\">\r\n      <div className=\"current-track-area\">\r\n        {!playInterval.current ? (\r\n          <button className=\"control-button play-button\" onClick={handlePlay}>\r\n            <i className=\"fas fa-play\"></i>\r\n          </button>\r\n        ) : (\r\n          <button className=\"control-button play-button\" onClick={handleStop}>\r\n            <i className=\"fas fa-stop\"></i>\r\n          </button>\r\n        )}\r\n        <CurrentTrackDisplay />\r\n        <button className=\"control-button\" onClick={handleRemove}>\r\n          <i className=\"fas fa-chevron-left\"></i>\r\n        </button>\r\n        <button className=\"control-button\" onClick={handleClear}>\r\n          <i className=\"fas fa-times\"></i>\r\n        </button>\r\n        <button className=\"control-button\" onClick={handleSave}>\r\n          <i className=\"fas fa-chevron-down\"></i>\r\n        </button>\r\n      </div>\r\n      <SoundStore />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SoundStorePane;\r\n","import uuidv1 from \"uuid/v1\";\r\n\r\nimport {\r\n  ADD_SOUND,\r\n  PLAY_SOUND,\r\n  REMOVE_SOUND,\r\n  CLEAR_DISPLAYS,\r\n  SAVE_TRACK,\r\n  DELETE_TRACK,\r\n  CLEAR_CURRENT_TRACK,\r\n  SELECT_TRACK\r\n} from \"../types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_SOUND:\r\n      return {\r\n        ...state,\r\n        currentSound: { id: action.payload.id, name: action.payload.name },\r\n        currentTrack: [...state.currentTrack, action.payload]\r\n      };\r\n    case PLAY_SOUND:\r\n      return {\r\n        ...state,\r\n        currentSound: action.payload\r\n      };\r\n    case REMOVE_SOUND:\r\n      return {\r\n        ...state,\r\n        currentTrack: [...state.currentTrack.slice(0, -1)]\r\n      };\r\n    case CLEAR_DISPLAYS:\r\n      return {\r\n        ...state,\r\n        currentSound: {}\r\n      };\r\n    case SAVE_TRACK:\r\n      return {\r\n        ...state,\r\n        currentSound: {},\r\n        currentTrack: [],\r\n        savedTracks: [\r\n          { id: uuidv1(), track: state.currentTrack },\r\n          ...state.savedTracks\r\n        ]\r\n      };\r\n    case DELETE_TRACK:\r\n      return {\r\n        ...state,\r\n        savedTracks: state.savedTracks.filter(\r\n          track => track.id !== action.payload\r\n        )\r\n      };\r\n    case CLEAR_CURRENT_TRACK:\r\n      return {\r\n        ...state,\r\n        currentSound: {},\r\n        currentTrack: []\r\n      };\r\n    case SELECT_TRACK:\r\n      return {\r\n        ...state,\r\n        currentTrack: state.savedTracks.filter(\r\n          track => track.id === action.payload\r\n        )[0].track\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// Sounds\r\nexport const ADD_SOUND = \"ADD_SOUND\";\r\nexport const PLAY_SOUND = \"PLAY_SOUND\";\r\nexport const REMOVE_SOUND = \"REMOVE_SOUND\";\r\nexport const CLEAR_DISPLAYS = \"CLEAR_DISPLAYS\";\r\n\r\n// Tracks\r\nexport const SAVE_TRACK = \"SAVE_TRACK\";\r\nexport const DELETE_TRACK = \"DELETE_TRACK\";\r\nexport const CLEAR_CURRENT_TRACK = \"CLEAR_CURRENT_TRACK\";\r\nexport const SELECT_TRACK = \"SELECT_TRACK\";\r\n","import React, { useReducer } from \"react\";\r\nimport uuidv1 from \"uuid/v1\";\r\n\r\nimport SoundContext from \"./soundContext\";\r\nimport soundReducer from \"./soundReducer\";\r\nimport {\r\n  ADD_SOUND,\r\n  PLAY_SOUND,\r\n  CLEAR_DISPLAYS,\r\n  REMOVE_SOUND,\r\n  SAVE_TRACK,\r\n  DELETE_TRACK,\r\n  CLEAR_CURRENT_TRACK,\r\n  SELECT_TRACK\r\n} from \"../types\";\r\n\r\nconst SoundState = props => {\r\n  const initialState = {\r\n    currentSound: {},\r\n    currentTrack: [],\r\n    savedTracks: []\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(soundReducer, initialState);\r\n\r\n  // Add sound\r\n  const addSound = ({ name, audio }) => {\r\n    dispatch({\r\n      type: ADD_SOUND,\r\n      payload: { name: name, audio: audio, id: uuidv1() }\r\n    });\r\n  };\r\n\r\n  // Play sound\r\n  const playSound = sound => {\r\n    dispatch({\r\n      type: PLAY_SOUND,\r\n      payload: sound\r\n    });\r\n  };\r\n\r\n  // Remove sound\r\n  const removeSound = () => {\r\n    dispatch({\r\n      type: REMOVE_SOUND\r\n    });\r\n  };\r\n\r\n  // Clear displays\r\n  const clearDisplays = () => {\r\n    dispatch({\r\n      type: CLEAR_DISPLAYS\r\n    });\r\n  };\r\n\r\n  // Save track\r\n  const saveTrack = () => {\r\n    dispatch({\r\n      type: SAVE_TRACK\r\n    });\r\n  };\r\n\r\n  // Delete track\r\n  const deleteTrack = id => {\r\n    dispatch({\r\n      type: DELETE_TRACK,\r\n      payload: id\r\n    });\r\n  };\r\n\r\n  // Clear currently played track\r\n  const clearTrack = () => {\r\n    dispatch({\r\n      type: CLEAR_CURRENT_TRACK\r\n    });\r\n  };\r\n\r\n  // Select track from the store\r\n  const selectTrack = id => {\r\n    dispatch({\r\n      type: SELECT_TRACK,\r\n      payload: id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <SoundContext.Provider\r\n      value={{\r\n        currentSound: state.currentSound,\r\n        currentTrack: state.currentTrack,\r\n        savedTracks: state.savedTracks,\r\n        addSound,\r\n        playSound,\r\n        removeSound,\r\n        clearDisplays,\r\n        saveTrack,\r\n        deleteTrack,\r\n        clearTrack,\r\n        selectTrack\r\n      }}\r\n    >\r\n      {props.children}\r\n    </SoundContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SoundState;\r\n","import React from \"react\";\n\nimport SoundPlayPane from \"./components/panes/SoundPlayPane\";\nimport SoundStorePane from \"./components/panes/SoundStorePane\";\n\nimport SoundState from \"./context/sound/SoundState\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <SoundState>\n      <div id=\"drum-machine\">\n        <div className=\"title\">Soundblaster 3000</div>\n        <div className=\"panes\">\n          <SoundPlayPane />\n          <SoundStorePane />\n        </div>\n      </div>\n    </SoundState>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}